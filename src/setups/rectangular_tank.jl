@doc raw"""
    RectangularTank(particle_spacing, spacing_ratio, fluid_width, fluid_heigth,
    container_width, container_height, fluid_density;
    n_layers=1, init_velocity=0.0, boundary_density=fluid_density)

Rectangular tank filled with a fluid to set up dam-break-style simulations.
The arguments are as follows:
- `particle_spacing`:                   Spacing betweeen the fluid particles
- `spacing_ratio`:                      Ratio of `particle_spacing` to boundary particle spacing.
- `fluid_width`, `fluid_heigth`:        Initial width and height of the fluid system, respectively.
- `container_width`, `container_width`: Initial width and height of the container, respectively.
- `fluid_density`:                      The rest density of the fluid.
A 3D tank is generated by calling the function additonally with the container and fluid depth.

The keyword arguments are as follows:
- `n_layers`:           Boundary layers.
- `init_velocity`:      Initial velocity of the fluid particles.
- `boundary_density`:   Density of the boundary particles (by default set to the rest density)

See also: [`reset_right_wall`](@ref)
"""
struct RectangularTank{NDIMS, ELTYPE<:Real}
    particle_coordinates    ::Array{ELTYPE, 2}
    particle_velocities     ::Array{ELTYPE, 2}
    particle_densities      ::Vector{ELTYPE}
    particle_masses         ::Vector{ELTYPE}
    boundary_coordinates    ::Array{ELTYPE, 2}
    boundary_masses         ::Vector{ELTYPE}
    particle_spacing        ::ELTYPE
    spacing_ratio           ::ELTYPE
    n_boundaries_x          ::Int
    n_boundaries_y          ::Int
    n_boundaries_z          ::Int

    function RectangularTank(particle_spacing, spacing_ratio, fluid_width, fluid_heigth,
                             container_width, container_height, fluid_density;
                             n_layers=1, init_velocity=0.0, boundary_density=fluid_density)
        NDIMS = 2
        ELTYPE = eltype(particle_spacing)

        # Particle data
        if abs(rem(fluid_width, particle_spacing, RoundNearest)) > eps()
            print_warn_message("fluid width", fluid_width, "Shrinking")
        end
        if abs(rem(fluid_heigth, particle_spacing, RoundNearest)) > eps()
            print_warn_message("fluid height", fluid_heigth, "Shrinking")
        end

        n_particles_x = floor(Int, fluid_width / particle_spacing) - 1
        n_particles_y = floor(Int, fluid_heigth / particle_spacing) - 1
        n_particles_per_dimension = (n_particles_x, n_particles_y)

        particle_coordinates = Array{Float64, 2}(undef, 2, prod(n_particles_per_dimension))
        particle_velocities = Array{Float64, 2}(undef, 2, prod(n_particles_per_dimension))

        initialize_particles!(particle_coordinates, particle_velocities, particle_spacing,
                              init_velocity, n_particles_per_dimension)
        particle_densities = fluid_density * ones(Float64, prod(n_particles_per_dimension))
        mass = fluid_density * particle_spacing^2
        particle_masses = mass * ones(ELTYPE, prod(n_particles_per_dimension))

        # Boundary particle data
        n_boundaries_x = ceil(Int, (container_width / particle_spacing * spacing_ratio)) + 2*n_layers-1
        n_boundaries_y = ceil(Int, (container_height / particle_spacing * spacing_ratio))
        n_boundaries   = (2 * n_boundaries_y) * n_layers + n_boundaries_x * n_layers

        if abs(rem(container_width, (particle_spacing/spacing_ratio))) > eps()
            print_warn_message("container width", container_width, "Expanding")
        end
        if abs(rem(container_height, (particle_spacing/spacing_ratio))) > eps()
            print_warn_message("container height", container_height, "Expanding")
        end

        boundary_coordinates = Array{Float64, 2}(undef, 2, n_boundaries)

        initialize_boundaries!(boundary_coordinates, particle_spacing, spacing_ratio,
                               n_boundaries_x, n_boundaries_y, n_layers)
        boundary_masses = boundary_density * particle_spacing^2 * ones(ELTYPE, n_boundaries)

        return new{NDIMS, ELTYPE}(particle_coordinates, particle_velocities, particle_densities, particle_masses,
                                  boundary_coordinates, boundary_masses, particle_spacing, spacing_ratio,
                                  n_boundaries_x, n_boundaries_y, 0)
    end

    function RectangularTank(particle_spacing, spacing_ratio,
                             fluid_width, fluid_heigth, fluid_depth,
                             container_width, container_height, container_depth,
                             fluid_density;
                             n_layers=1, init_velocity=0.0, boundary_density=fluid_density)
        NDIMS = 3
        ELTYPE = eltype(particle_spacing)
        mass = fluid_density * particle_spacing^2

        # Particle data
        n_particle_x = floor(Int, fluid_width / particle_spacing)-1
        n_particle_y = floor(Int, fluid_heigth / particle_spacing)-1
        n_particle_z = floor(Int, fluid_depth / particle_spacing)-1
        n_particles_per_dimension = (n_particle_x, n_particle_y, n_particle_z)

        if abs(rem(fluid_width, particle_spacing, RoundNearest)) > eps()
            print_warn_message("fluid width", fluid_width, "Shrinking")
        end
        if abs(rem(fluid_heigth, particle_spacing, RoundNearest)) > eps()
            print_warn_message("fluid height", fluid_heigth, "Shrinking")
        end
        if abs(rem(fluid_depth, particle_spacing, RoundNearest)) > eps()
            print_warn_message("fluid depth", fluid_depth, "Shrinking")
        end

        particle_coordinates = Array{Float64, 2}(undef, 3, prod(n_particles_per_dimension))
        particle_velocities = Array{Float64, 2}(undef, 3, prod(n_particles_per_dimension))

        initialize_particles!(particle_coordinates, particle_velocities, particle_spacing,
                              init_velocity, n_particles_per_dimension)
        particle_densities = fluid_density * ones(Float64, prod(n_particles_per_dimension))
        particle_masses = mass * ones(ELTYPE, prod(n_particles_per_dimension))

        # Boundary particle data
        if abs(rem(container_width, (particle_spacing/spacing_ratio))) > eps()
            print_warn_message("container width", container_width, "Expanding")
        end
        if abs(rem(container_height, (particle_spacing/spacing_ratio)))  > eps()
            print_warn_message("container height", container_height, "Expanding")
        end
        if abs(rem(container_depth, (particle_spacing/spacing_ratio)))  > eps()
            print_warn_message("container depth", container_depth, "Expanding")
        end

        n_boundaries_x = ceil(Int, container_width / particle_spacing * spacing_ratio) + 2*n_layers-1
        n_boundaries_y = ceil(Int, container_height / particle_spacing * spacing_ratio)
        n_boundaries_z = ceil(Int, container_depth / particle_spacing * spacing_ratio) + 2*n_layers-1
        n_boundaries   = (n_layers * n_boundaries_x * n_boundaries_z
                          + 2 * n_layers * n_boundaries_x * n_boundaries_y
                          + 2 * n_layers * (n_boundaries_x-(2*n_layers-1)) * n_boundaries_y)

        boundary_coordinates = Array{Float64, 2}(undef, 3, n_boundaries)

        initialize_boundaries!(boundary_coordinates, particle_spacing, spacing_ratio,
                               n_boundaries_x, n_boundaries_y, n_boundaries_z, n_layers)
        boundary_masses = boundary_density * particle_spacing^2 * ones(ELTYPE, n_boundaries)

        return new{NDIMS, ELTYPE}(particle_coordinates, particle_velocities, particle_densities, particle_masses,
                                  boundary_coordinates, boundary_masses, particle_spacing, spacing_ratio,
                                  n_boundaries_x, n_boundaries_y, n_boundaries_z)
    end
end


function  initialize_particles!(particle_coordinates, particle_velocities, particle_spacing,
                                init_velocity, n_particles_per_dimension::NTuple{2})

    for y in 1:n_particles_per_dimension[2],
            x in 1:n_particles_per_dimension[1]
        particle = (x - 1) * n_particles_per_dimension[2] + y

        # Coordinates
        particle_coordinates[1, particle] = x * particle_spacing
        particle_coordinates[2, particle] = y * particle_spacing

        # Velocities
        particle_velocities[1, particle] = init_velocity
        particle_velocities[2, particle] = init_velocity
    end
end

function  initialize_particles!(particle_coordinates, particle_velocities, particle_spacing,
                                init_velocity, n_particles_per_dimension::NTuple{3})

    for z in 1:n_particles_per_dimension[3],
            y in 1:n_particles_per_dimension[2],
            x in 1:n_particles_per_dimension[1]
        particle = (x - 1) * n_particles_per_dimension[2] * n_particles_per_dimension[3] +
            (y - 1) * n_particles_per_dimension[3] + z

        # Coordinates
        particle_coordinates[1, particle] = x * particle_spacing
        particle_coordinates[2, particle] = y * particle_spacing
        particle_coordinates[3, particle] = z * particle_spacing

        # Velocities
        particle_velocities[1, particle] = init_velocity
        particle_velocities[2, particle] = init_velocity
        particle_velocities[3, particle] = init_velocity
    end
end


function initialize_boundaries!(boundary_coordinates, particle_spacing, spacing_ratio,
                                n_boundaries_x, n_boundaries_y, n_layers)
    boundary_particle_spacing = particle_spacing / spacing_ratio

    boundary_particle = 0
    for i in 0:n_layers-1
        # Left boundary
        for y in 1:n_boundaries_y
            boundary_particle += 1

            boundary_coordinates[1, boundary_particle] = 0 - i*boundary_particle_spacing
            boundary_coordinates[2, boundary_particle] = y * boundary_particle_spacing
        end

        # Right boundary
        for y in 1:n_boundaries_y
            boundary_particle += 1

            boundary_coordinates[1, boundary_particle] = ((n_boundaries_x-(2*n_layers-1))
                                                          * boundary_particle_spacing
                                                          + i*boundary_particle_spacing)
            boundary_coordinates[2, boundary_particle] = y * boundary_particle_spacing
        end

        # Bottom boundary
        for x in 1:n_boundaries_x
            boundary_particle += 1

            boundary_coordinates[1, boundary_particle] = (x * boundary_particle_spacing
                                                          - n_layers*boundary_particle_spacing)
            boundary_coordinates[2, boundary_particle] = -i*boundary_particle_spacing
        end
    end
end

function initialize_boundaries!(boundary_coordinates, particle_spacing, spacing_ratio,
                                n_boundaries_x, n_boundaries_y, n_boundaries_z, n_layers)
    boundary_particle_spacing = particle_spacing/spacing_ratio

    boundary_particle = 0
    for i in 0:n_layers-1
        # -x boundary (y-z-plane)
        for z in 1:n_boundaries_z-(2*n_layers-1), y in 1:n_boundaries_y
            boundary_particle += 1

            boundary_coordinates[1, boundary_particle] = 0 - i*boundary_particle_spacing
            boundary_coordinates[2, boundary_particle] = y * boundary_particle_spacing
            boundary_coordinates[3, boundary_particle] = z * boundary_particle_spacing
        end

        # +x boundary (y-z-plane)
        for z in 1:n_boundaries_z-(2*n_layers-1), y in 1:n_boundaries_y
            boundary_particle += 1

            boundary_coordinates[1, boundary_particle] = ((n_boundaries_x-(2*n_layers-1))
                                                          * boundary_particle_spacing
                                                          + i * boundary_particle_spacing)
            boundary_coordinates[2, boundary_particle] = y * boundary_particle_spacing
            boundary_coordinates[3, boundary_particle] = z * boundary_particle_spacing
        end

        # -z boundary (x-y-plane)
        for y in 1:n_boundaries_y, x in 1:n_boundaries_x
            boundary_particle += 1

            boundary_coordinates[1, boundary_particle] = (x * boundary_particle_spacing
                                                          - n_layers*boundary_particle_spacing)
            boundary_coordinates[2, boundary_particle] = y * boundary_particle_spacing
            boundary_coordinates[3, boundary_particle] = 0 - i*boundary_particle_spacing
        end

        # +z boundary (x-y-plane)
        for y in 1:n_boundaries_y, x in 1:n_boundaries_x
            boundary_particle += 1

            boundary_coordinates[1, boundary_particle] = (x * boundary_particle_spacing
                                                          - n_layers*boundary_particle_spacing)
            boundary_coordinates[2, boundary_particle] = y * boundary_particle_spacing
            boundary_coordinates[3, boundary_particle] = ((n_boundaries_z-(2*n_layers-1))
                                                          * boundary_particle_spacing
                                                          + i*boundary_particle_spacing)
        end

        # Bottom boundary (x-z-plane)
        for z in 1:n_boundaries_z, x in 1:n_boundaries_x
            boundary_particle += 1

            boundary_coordinates[1, boundary_particle] = (x * boundary_particle_spacing
                                                          - n_layers*boundary_particle_spacing)
            boundary_coordinates[2, boundary_particle] = -i * boundary_particle_spacing
            boundary_coordinates[3, boundary_particle] = (z * boundary_particle_spacing
                                                          - n_layers*boundary_particle_spacing)
        end
    end
end

@doc raw"""
    reset_right_wall!

At current state, this function is not generic, so far.
The right wall of the tank will be set to a desired position by calling the function with the keyword argument `wall_position`, which
is the ``x`` coordinate of the desired position.
"""
#2D
function reset_right_wall!(rectangular_tank::RectangularTank{2}, container_width;
                           wall_position=container_width, n_layers=1)
    @unpack boundary_coordinates, particle_spacing, spacing_ratio,
            n_boundaries_x, n_boundaries_y = rectangular_tank

    for i in 0:n_layers-1
        for y in 1:n_boundaries_y
            boundary_particle = n_boundaries_y * (1+i) + n_boundaries_x * i + n_boundaries_y * i + y
            boundary_coordinates[1, boundary_particle] = wall_position + i*particle_spacing/spacing_ratio
        end
    end
end

#3D
function reset_right_wall!(rectangular_tank::RectangularTank{3}, container_width;
                           wall_position=container_width, n_layers=1)
    @unpack boundary_coordinates, particle_spacing, spacing_ratio,
            n_boundaries_x, n_boundaries_y, n_boundaries_z = rectangular_tank

    # +x boundary (y-z-plane)
    for i in 0:n_layers-1
        boundary_particle = (( n_boundaries_z - (2*n_layers-1) ) * n_boundaries_y * (1+i)
                             + ( n_boundaries_z - (2*n_layers-1) ) * n_boundaries_y * i
                             + ( n_boundaries_y * n_boundaries_x * 2 + n_boundaries_z * n_boundaries_x ) * i)
        for z in 1:n_boundaries_z, y in 1:n_boundaries_y
            boundary_particle += 1
            boundary_coordinates[1, boundary_particle] = wall_position + i*particle_spacing/spacing_ratio
        end
    end
end


function print_warn_message(dimension, size, action)
    @info "The desired $dimension $size is not a multiple of the particle spacing.\n $action to the next multiple."
end
