@doc raw"""
    BoundarySchemeDummyParticles(density_calculator, smoothing_kernel,
                                          smoothing_length, state_equation)

Boundaries modeled as dummy particles, which are treated like fluid particles,
but their positions and velocities are not evolved in time. Since the force towards the fluid
should not change with the material density when used with a `SolidParticleContainer`, the
dummy particles need to have a mass corresponding to the fluid's rest density, which we call
"hydrodynamic mass", as opposed to mass corresponding to the material density of a
`SolidParticleContainer`.

Here, `initial_density` and `hydrodynamic_mass` are vectors that contains the initial density
and the hydrodynamic mass respectively for each boundary particle.
Note that when used with [`SummationDensity`](@ref) (see below), this is only used to determine
the element type and the number of boundary particles.

To establish a relationship between density and pressure, a `state_equation` has to be passed,
which should be the same as for the adjacent fluid containers.
To sum over neighboring particles, a `smoothing_kernel` and `smoothing_length` needs to be passed.
This should be the same as for the adjacent fluid container with the largest smoothing length.

In the literature, this kind of boundary particles is referred to as
"dummy particles" (Adami et al., 2012 and Valizadeh & Monaghan, 2015),
"frozen fluid particles" (Akinci et al., 2012) or "dynamic boundaries (Crespo et al., 2007).
The key detail of this boundary condition and the only difference between the boundary models
in these references is the way the density and pressure of boundary particles is computed.

Since boundary particles are treated like fluid particles, the force
on fluid particle ``a`` due to boundary particle ``b`` is given by
```math
f_{ab} = m_a m_b \left( \frac{p_a}{\rho_a^2} + \frac{p_b}{\rho_b^2} \right) \nabla_{r_a} W(\Vert r_a - r_b \Vert, h).
```
The quantities to be defined here are the density ``\rho_b`` and pressure ``p_b``
of the boundary particle ``b``.

We provide three options to compute the boundary density and pressure, determined by the `density_calculator`:
1. With [`SummationDensity`](@ref), the density is calculated by summation over the neighboring particles,
   and the pressure is computed from the density with the state equation.
2. With [`ContinuityDensity`](@ref), the density is integrated from the continuity equation,
   and the pressure is computed from the density with the state equation.
   Note that this causes a gap between fluid and boundary where the boundary is initialized
   without any contact to the fluid. This is due to overestimation of the boundary density
   as soon as the fluid comes in contact with boundary particles that initially did not have
   contact to the fluid.
   Therefore, in dam break simulations, there is a visible "step", even though the boundary is supposed to be flat.
   See also [dual.sphysics.org/faq/#Q_13](https://dual.sphysics.org/faq/#Q_13).
3. With [`AdamiPressureExtrapolation`](@ref), the pressure is extrapolated from the pressure of the
   fluid according to (Adami et al., 2012), and the density is obtained by applying the inverse of the state equation.

## References:
- S. Adami, X. Y. Hu, N. A. Adams.
  "A generalized wall boundary condition for smoothed particle hydrodynamics".
  In: Journal of Computational Physics 231, 21 (2012), pages 7057–7075.
  [doi: 10.1016/J.JCP.2012.05.005](https://doi.org/10.1016/J.JCP.2012.05.005)
- Alireza Valizadeh, Joseph J. Monaghan.
  "A study of solid wall models for weakly compressible SPH".
  In: Journal of Computational Physics 300 (2015), pages 5–19.
  [doi: 10.1016/J.JCP.2015.07.033](https://doi.org/10.1016/J.JCP.2015.07.033)
- Nadir Akinci, Markus Ihmsen, Gizem Akinci, Barbara Solenthaler, Matthias Teschner.
  "Versatile rigid-fluid coupling for incompressible SPH".
  ACM Transactions on Graphics 31, 4 (2012), pages 1–8.
  [doi: 10.1145/2185520.2185558](https://doi.org/10.1145/2185520.2185558)
- A. J. C. Crespo, M. Gómez-Gesteira, R. A. Dalrymple.
  "Boundary conditions generated by dynamic particles in SPH methods"
  In: Computers, Materials and Continua 5 (2007), pages 173-184.
  [doi: 10.3970/cmc.2007.005.173](https://doi.org/10.3970/cmc.2007.005.173)
"""
struct BoundarySchemeDummyParticles{DC, ELTYPE <: Real, K, C, SE}
    density_calculator :: DC
    smoothing_kernel   :: K
    smoothing_length   :: ELTYPE
    state_equation     :: SE
    pressure           :: Vector{ELTYPE}
    hydrodynamic_mass  :: Vector{ELTYPE}
    cache              :: C

    function BoundarySchemeDummyParticles(density_calculator, smoothing_kernel,
                                          smoothing_length, state_equation)
        ELTYPE = eltype(smoothing_length)

        pressure = Vector{ELTYPE}(undef, 0)
        hydrodynamic_mass = Vector{ELTYPE}(undef, 0)

        cache = create_cache(pressure, density_calculator)

        new{typeof(density_calculator), typeof(smoothing_kernel), typeof(state_equation),
            typeof(cache)}(density_calculator, smoothing_kernel, smoothing_length,
                           state_equation, pressure, hydrodynamic_mass, cache)
    end
end

function initialize!(scheme::BoundarySchemeDummyParticles, container, neighborhood_search)
    NDIMS = ndims(container)

    if ndims(scheme.smoothing_kernel) != NDIMS
        throw(ArgumentError("smoothing kernel dimensionality must be $NDIMS for a $(NDIMS)D problem"))
    end

    resize!(scheme.pressure, nparticles(container))
    initialize_cache!(scheme, nparticles(container))
end

function initialize_cache!(scheme::BoundarySchemeDummyParticles{SummationDensity},
                           n_particles)
    resize!(scheme.cache.density, n_particles)
end

function initialize_cache!(scheme::BoundarySchemeDummyParticles{AdamiPressureExtrapolation},
                           n_particles)
    resize!(scheme.cache.volume, n_particles)
    resize!(scheme.cache.density, n_particles)
end

function create_cache(initial_density, ::AdamiPressureExtrapolation)
    density = similar(initial_density)
    volume = similar(initial_density)

    return (; density, volume)
end

@inline add_acceleration!(dv, particle, container, ::BoundarySchemeDummyParticles) = dv

# No particle positions are advanced for this boundary scheme,
# except when using `BoundarySchemeDummyParticles` with `ContinuityDensity`.
@inline n_moving_particles(container, ::BoundarySchemeDummyParticles) = 0

@inline function n_moving_particles(container,
                                    ::BoundaryParticleContainer{ContinuityDensity})
    return nparticles(container)
end

@inline u_nvariables(container, scheme::BoundarySchemeDummyParticles) = 0

# For `BoundarySchemeDummyParticles with `ContinuityDensity`, this needs to be 1.
# For all other models and density calculators, it's irrelevant.
@inline v_nvariables(container, scheme::BoundarySchemeDummyParticles) = 1

@inline function current_velocity(v, container, ::BoundarySchemeDummyParticles, particle)
    # TODO moving boundaries
    return SVector(ntuple(_ -> 0.0, Val(ndims(container))))
end
